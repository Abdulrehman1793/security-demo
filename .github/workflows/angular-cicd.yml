name: Angular CI-CD
on:
  push:
    paths:
      - "ng-security/**"
      - ".github/**/angular*.yml"
    branches:
      - main

env:
  PROJECT_DIRECTORY: "ng-security"
  NODE_VERSION: 18

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.npmrc
            ./${{env.PROJECT_DIRECTORY}}/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
              
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Change Directory to Angular Project
        run: cd ${{env.PROJECT_DIRECTORY}}

      - name: Install Dependencies
        run: |
          cd ${{env.PROJECT_DIRECTORY}}
          npm ci

      - name: Run Tests
        run: |
          cd ${{env.PROJECT_DIRECTORY}}
          npm run git-test

      - name: Archive Test Results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: ${{env.PROJECT_DIRECTORY}}/coverage

      - name: Build Angular App
        id: build-prod
        run: |
          cd ${{env.PROJECT_DIRECTORY}}
          npm run build --prod

      - name: Archive Build Artifacts
        id: ng-dist
        uses: actions/upload-artifact@v3.1.3
        with:
          name: ${{env.PROJECT_DIRECTORY}}
          path: ${{env.PROJECT_DIRECTORY}}/dist/

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{env.PROJECT_DIRECTORY}}
          path: dist/

      - name: Deploy to Production
        id: deploy-to-production
        if: success()
        run: |
          ls dist/${{env.PROJECT_DIRECTORY}}/
          echo "Deployment to production would occur here ./deploy.sh"

      - name: Deploy Failure
        if: failure() && steps.deploy-to-production.outcome == 'failure'
        run: echo "Deploy failed"
